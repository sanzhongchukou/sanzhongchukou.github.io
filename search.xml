<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[SQL索引失效情况]]></title>
    <url>%2Fpost%2Fc805a0c3.html</url>
    <content type="text"><![CDATA[The young always have the same problem: how to rebel and conform at the same time. They have now solved this by defying their parents and copying one another.年轻人都会受到同一个问题的困扰：怎样在反抗的同时又保持顺从。这个问题现在得到了解决，他们在反抗父母，同时又相互模仿。 SQL索引失效情况1.对查询进行优化，要尽量避免全表扫描，首先考虑在进行条件判断的字段上创建索引。2.应尽量避免在WHERE子句中对字段进行NULL值判断，否则将导致引擎放弃使用索引而进行全表扫描。3.应尽量避免在WHERE子句中使用!=或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。4.应尽量避免在WHERE子句中使用OR来连接条件，如果一个字段有索引一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，要使用UNION ALL实现。5.NOT IN也要慎用，否则会导致全表扫描，很多时候用NOT EXISTS代替NOT IN是一个好的选择。6.模糊查询使用了%也将导致全表挺扫描（MYSQL），只在mysql失效，可以将用户可能输入的关键字使用下拉列表列出来，在数据库中使用全名查询，比如说：SELECT * FROM EMP WHERE JOB LIE ‘关键字’;。7.应尽量避免在WHERE子句中对字段进行表达式计算操作，这将导致引擎放弃使用索引而进行全表扫描。]]></content>
      <categories>
        <category>面试记录</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[三个步骤教你解决Microsoft Store无法联网问题]]></title>
    <url>%2Fpost%2Fd56f80d6.html</url>
    <content type="text"><![CDATA[The young always have the same problem: how to rebel and conform at the same time. They have now solved this by defying their parents and copying one another.年轻人都会受到同一个问题的困扰：怎样在反抗的同时又保持顺从。这个问题现在得到了解决，他们在反抗父母，同时又相互模仿。 在使用win10的过程中，有段时间需要使用应用商店，但总是会出现网络链接问题，本人百思不得其解，终于在某次偶然情况下发现一个解决办法，如果你也出现win10应用商店无法使用的情况，不妨测试一下这个方法。 一打开“运行”输入 inetcpl.cpl 或者“WINDOWS”+“R”键，输入 inetcpl.cpl亦可。 二点开高级往下拉，勾上”使用TLS 1.2”选项，或者点还原高级设置。 三打开Microsoft Store刷新页面可成功打开。]]></content>
      <categories>
        <category>Win10系统</category>
      </categories>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线程与死锁 + 面试题]]></title>
    <url>%2Fpost%2F70e48b88.html</url>
    <content type="text"><![CDATA[The ultimate measure of a man is not where he stands in moments of comfort and convenience, but where he stands at times of challenge and controversy.衡量一个人的根本标准不是看他在安逸便利时所采取的立场， 而是看他在面临挑战和争论时所持有的立场。 线程介绍线程（Thread）是程序运行的执行单元，依托于进程存在。一个进程中可以包含多个线程，多线程可以共享一块内存空间和一组系统资源，因此线程之间的切换更加节省资源、更加轻量化，因而也被称为轻量级的进程。 什么是进程进程（Processes）是程序的一次动态执行，是系统进行资源分配和调度的基本单位，是操作系统运行的基础，通常每一个进程都拥有自己独立的内存空间和系统资源。简单来说，进程可以被当做是一个正在运行的程序。 为什么需要线程程序的运行必须依靠进程，进程的实际执行单元就是线程。 为什么需要多线程多线程可以提高程序的执行性能。例如，有个 90 平方的房子，一个人打扫需要花费 30 分钟，三个人打扫就只需要 10 分钟，这三个人就是程序中的“多线程”。 线程使用线程的创建，分为以下三种方式： 继承 Thread 类，重写 run 方法 实现 Runnable 接口，实现 run 方法 实现 Callable 接口，实现 call 方法 下面分别来看看线程创建和使用的具体代码。 1）继承 Thread 类请参考以下代码： 123456789101112class ThreadTest &#123; public static void main(String[] args) throws Exception &#123; MyThread thread = new MyThread(); thread.start(); &#125;&#125;class MyThread extends Thread &#123; @Override public void run() &#123; System.out.println("Thread"); &#125;&#125; 以上程序执行结果如下： Thread 2）实现 Runnable 接口请参考以下代码： 123456789101112class ThreadTest &#123; public static void main(String[] args) &#123; MyRunnable runnable = new MyRunnable(); new Thread(runnable).start(); &#125;&#125;class MyRunnable implements Runnable &#123; @Override public void run() &#123; System.out.println("Runnable"); &#125;&#125; 以上程序执行结果如下： Runnable 3）实现 Callable 接口请参考以下代码： 123456789101112131415161718class ThreadTest &#123; public static void main(String[] args) throws Exception &#123; MyCallable callable = new MyCallable(); // 定义返回结果 FutureTask&lt;String&gt; result = new FutureTask(callable); // 执行程序 new Thread(result).start(); // 输出返回结果 System.out.println(result.get()); &#125;&#125;class MyCallable implements Callable &#123; @Override public String call() &#123; System.out.println("Callable"); return "Success"; &#125;&#125; 以上程序执行结果如下： Callable Success 可以看出，Callable 的调用是可以有返回值的，它弥补了之前调用线程没有返回值的情况，它是随着 JDK 1.5 一起发布的。 4）JDK 8 创建线程JDK 8 之后可以使用 Lambda 表达式很方便地创建线程，请参考以下代码： 1new Thread(() -&gt; System.out.println("Lambda Of Thread.")).start(); 线程高级用法线程等待使用 wait() 方法实现线程等待，代码如下： 1234567891011121314System.out.println(LocalDateTime.now());Object lock = new Object();Thread thread = new Thread(() -&gt; &#123; synchronized (lock)&#123; try &#123; // 1 秒钟之后自动唤醒 lock.wait(1000); System.out.println(LocalDateTime.now()); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;);thread.start(); 以上程序执行结果如下： 2019-06-22T20:53:08.776 2019-06-22T20:53:09.788 注意：当使用 wait() 方法时，必须先持有当前对象的锁，否则会抛出异常 java.lang.IllegalMonitorStateException。 线程唤醒使用 notify()/notifyAll() 方法唤醒线程。 notify() 方法随机唤醒对象的等待池中的一个线程； notifyAll() 唤醒对象的等待池中的所有线程。 使用如下： 123Object lock = new Object();lock.wait();lock.notify();// lock.notifyAll(); 线程休眠12// 休眠 1 秒Thread.sleep(1000); 等待线程执行完成 等待线程执行完成 123456789101112Thread joinThread = new Thread(() -&gt; &#123; try &#123; System.out.println("执行前"); Thread.sleep(1000); System.out.println("执行后"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125;);joinThread.start();joinThread.join();System.out.println("主程序"); 以上程序执行结果： 以上程序执行结果： 执行前 执行后 主程序 yield 交出 CPU 执行权 1234567891011new Thread()&#123; @Override public void run() &#123; for (int i = 1; i &lt; 10; i++) &#123; if (i == 5) &#123; // 让同优先级的线程有执行的机会 this.yield(); &#125; &#125; &#125;&#125;.start(); 注意：yield 方法是让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态。 注意：yield 方法是让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态。 线程中断使用 System.exit(0) 可以让整个程序退出；要中断单个线程，可配合 interrupt() 对线程进行“中断”。使用代码如下： 1234567@Resourceprivate IOrderService orderService;@RequestMapping("/orderUpdate")public String orderUpdate(Integer id,Model m)&#123; orderService.getUpdateInfo(id, m); return "order/orderUpdate";&#125; 线程优先级在 Java 语言中，每一个线程有一个优先级，默认情况下，一个线程继承它父类的优先级。可以使用 setPriority 方法设置（1-10）优先级，默认的优先级是 5，数字越大表示优先级越高，优先级越高的线程可能优先被执行的概率就越大。设置优先级的代码如下： 123Thread thread = new Thread(() -&gt; System.out.println("Java"));thread.setPriority(10);thread.start(); 死锁死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。比如，当线程 A 持有独占锁 a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 A B 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。死锁示意图如下所示：死锁代码： 12345678910111213141516171819202122232425262728293031323334Object obj1 = new Object();Object obj2 = new Object();// 线程1拥有对象1，想要等待获取对象2new Thread() &#123; @Override public void run() &#123; synchronized (obj1) &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (obj2) &#123; System.out.println(Thread.currentThread().getName()); &#125; &#125; &#125;&#125;.start();// 线程2拥有对象2，想要等待获取对象1new Thread() &#123; @Override public void run() &#123; synchronized (obj2) &#123; try &#123; Thread.sleep(1000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; synchronized (obj1) &#123; System.out.println(Thread.currentThread().getName()); &#125; &#125; &#125;&#125;.start(); 相关面试题1.线程和进程有什么区别和联系？答：从本质上来说，线程是进程的实际执行单元，一个程序至少有一个进程，一个进程至少有一个线程，它们的区别主要体现在以下几个方面： 进程间是独立的，不能共享内存空间和上下文，而线程可以； 进程是程序的一次执行，线程是进程中执行的一段程序片段； 线程占用的资源比进程少。 2.如何保证一个线程执行完再执行第二个线程？答：使用 join() 方法，等待上一个线程的执行完之后，再执行当前线程。示例代码： 123456789101112Thread joinThread = new Thread(() -&gt; &#123; try &#123; System.out.println("执行前"); Thread.sleep(1000); System.out.println("执行后"); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125;&#125;);joinThread.start();joinThread.join();System.out.println("主程序"); 3.线程有哪些常用的方法？答：线程的常用方法如下： currentThread()：返回当前正在执行的线程引用 getName()：返回此线程的名称 setPriority()/getPriority()：设置和返回此线程的优先级 isAlive()：检测此线程是否处于活动状态，活动状态指的是程序处于正在运行或准备运行的状态 sleep()：使线程休眠 join()：等待线程执行完成 yield()：让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态 interrupted()：是线程处于中断的状态，但不能真正中断线程 4.wait() 和 sleep() 有什么区别？答：wait() 和 sleep() 的区别主要体现在以下三个方面。 存在类的不同：sleep() 来自 Thread，wait() 来自 Object。 释放锁：sleep() 不释放锁；wait() 释放锁。 用法不同：sleep() 时间到会自动恢复；wait() 可以使用 notify()/notifyAll() 直接唤醒。 5.守护线程是什么？答：守护线程是一种比较低级别的线程，一般用于为其他类别线程提供服务，因此当其他线程都退出时，它也就没有存在的必要了。例如，JVM（Java 虚拟机）中的垃圾回收线程。 6.线程有哪些状态？答：在 JDK 8 中，线程的状态有以下六种。 NEW：尚未启动 RUNNABLE：正在执行中 BLOCKED：阻塞（被同步锁或者 IO 锁阻塞） WAITING：永久等待状态 TIMED_WAITING：等待指定的时间重新被唤醒的状态 TERMINATED：执行完成 题目分析：JDK 8 线程状态的源码如下图所示： 7.线程中的 start() 和 run() 有那些区别？答：start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start() 只能调用一次。 8.产生死锁需要具备哪些条件？答：产生死锁的四个必要条件： 互斥条件：一个资源每次只能被一个线程使用； 请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放； 不剥夺条件：线程已获得的资源，在末使用完之前，不能强行剥夺； 循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系； 这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。 9.如何预防死锁？答：预防死锁的方法如下： 尽量使用 tryLock(long timeout, TimeUnit unit) 的方法 (ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁； 尽量使用 Java. util. concurrent 并发类代替自己手写锁； 尽量降低锁的使用粒度，尽量不要几个功能用同一把锁； 尽量减少同步的代码块。 10.thread.wait() 和 thread.wait(0) 有什么区别？代表什么含义？答：thread.wait() 和 thread.wait(0) 是相同的，使用 thread.wait() 内部其实是调用的 thread.wait(0)，源码如下： 123public final void wait() throws InterruptedException &#123; wait(0);&#125; wait() 表示进入等待状态，释放当前的锁让出 CPU 资源，并且只能等程序执行 notify()/notifyAll() 方法才会被重写唤醒。 11.如何让两个程序依次输出 11/22/33 等数字，请写出实现代码？答：使用思路是在每个线程输出信息之后，让当前线程等待一会再执行下一次操作，具体实现代码如下： 1234567891011121314151617181920new Thread(() -&gt; &#123; for (int i = 1; i &lt; 4; i++) &#123; System.out.println("线程一：" + i); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;).start();new Thread(() -&gt; &#123; for (int i = 1; i &lt; 4; i++) &#123; System.out.println("线程二：" + i); try &#123; Thread.sleep(100); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125;).start(); 程序执行结果如下： 线程一：1 线程二：1 线程二：2 线程一：2 线程二：3 线程一：3 12.说一下线程的调度策略？答：线程调度器选择优先级最高的线程运行，但是如果发生以下情况，就会终止线程的运行： 线程体中调用了 yield() 方法，让出了对 CPU 的占用权； 线程体中调用了 sleep() 方法，使线程进入睡眠状态； 线程由于 I/O 操作而受阻塞； 另一个更高优先级的线程出现； 在支持时间片的系统中，该线程的时间片用完。 总结程序的运行依靠的是进程，而进程的执行依靠的是多个线程，多线程之间可以共享一块内存和一组系统资源，而多进程间通常是相互独立的。线程的创建有三种方式：继承 Thread 重写 run 方法，实现 Runnable 或 Callable 接口，其中 Callable 可以允许线程的执行有返回值，JDK 8 中也可以使用 Lambda 来更加方便的使用线程，线程是有优先级的，优先级从 1-10 ，数字越大优先级越高，也越早被执行。如果两个线程各自拥有一把锁的同时，又同时等待获取对方的锁，就会造成死锁。可以降低锁的粒度或减少同步代码块的范围或使用 Java 提供的安全类，来防止死锁的产生。]]></content>
      <categories>
        <category>面试记录</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面试技巧]]></title>
    <url>%2Fpost%2Fc4b9ec09.html</url>
    <content type="text"><![CDATA[Content and riches seldom meet together. Riches take thou, contentment I had rather.财富与满足很少能同时拥有。拿走财富吧，我宁愿只要满足。 面试技巧（1）你觉得你的缺点是什么？推荐回答：“我的缺点是，做事的时候顾虑太多，虽然会让我少犯一些差错，但很可能在决策过程中错过一些好机会，这要求我注重团队协作，运用集体智慧，排查风险，抓住机会。”或者：“我心直口快，容易得罪人。不过我向来对事不对人，而且事后也主动道歉，和我相处过一段时间的人都能理解我的这个缺点。” （2）谈谈你离开上一家公司的原因？Tips：一定不要说上家公司的坏话，回答要表现出正能量。钱太少，工作太累，不想加班这类原因不要说。推荐一个比较安全的回答：“我在上一家公司干的还可以，也取得了一定的成绩，但在职业上遇到了瓶颈，进步太慢。这让我很痛苦，所以我来了，因为我想寻求更广阔的发展空间，更好的实现我的人生价值。”欲抑先扬，这样的回答不见得多亮眼，但至少不会扣分。当然，如果确实是因为家里有人需要照顾或者其他原因的，诚恳地说出来就好，人家只会认为你有孝心，不会有任何的问题。 （3）谈谈你在未来5年的职业规划Tips：细节是王道。推荐回答：非常感谢您的提问，首先，这是一个我非常感兴趣的行业，能将我的工作和兴趣相结合，因此，目前我会认真的对待该岗位，希望能尽快融入公司团队。同时，在5年之内，我要持续的学习xxx知识，掌握xxx能力，争取做到xxx职位，独立负责xxx事务，解决xxx问题。另外，我也会根据自身的发展情况不断调整计划，使其更合理，更容易达成。对于职业规划，大致是这样子的，谢谢！总之，回答的时候，不要只丢一个目标在那里，会让人觉得你太浮躁，不踏实。正确的回答要有目标，有细节。 （4）你为什么来应聘这个岗位？Tips：根据自身条件，重点描述匹配该职位的自身已经具备的工作经历和能力，告诉公司，选我！选我！选我！推荐回答：“首先，我个人对这个岗位非常感兴趣，它能够让我将工作与生活结合起来。其次，我曾经通过xxx，做了xxx，取得了xxx效果，具备xxx能力，这恰巧也是这个岗位所需要的，所以，我来了。” （5）说说你在过去工作中遇到的困难，你是如何解决的？叙述模式：做了什么+怎么做的+最后的结果+总结Tips：重点描述解决问题的过程，别忘了总结经验推荐回答：我在xxx工作时，接到了xxx项目。因为和竞品外观相似度较高，需要规避专利风险，对xxx重新设计。（做了什么）由于焊点不能暴露在外面，又要保证美观，因此我连着加班3天，做了十几个备选方案，筛选出一套全新的一体化和内折叠的结构设计方案（怎么做的）不仅外观更好看，产品上市后，消费者反馈良好。（最后的结果），在这次工作中，我意识到，遇到问题，我们不能钻牛角尖，需要及时变换方式方法，灵活应对。（总结经验） （6）你在大学里的成绩并不好，是什么原因呢？Tips：实话实说，简明扼要，但是尽量传递正能量。推荐回答：一直学习都挺认真的，之前方法不对，一直没学好，后来找到问题，成绩就慢慢赶上来了。总之，尽量传递正能量，不要找学习成绩不重要，自己不想学之类的借口。 （7）你对薪资有什么要求？Tips：根据薪资预算范围给出合理要求，不能过高，也不能过低。如果你感觉聊得不错，预算工资可以比较接近预算上限（10000），聊得一般的话，取个中间数就可以。（7500） 介绍自己时注意不要说自己的学历低，就算面试官问起说自己准备提升学历，需要工作后用工资交学费先问面试官否自己说话能否听懂，表示对面试官的尊敬。听力是否有问题]]></content>
      <categories>
        <category>面试记录</category>
      </categories>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redis持久化；RDB和AOF]]></title>
    <url>%2Fpost%2F0.html</url>
    <content type="text"><![CDATA[Only a person who has faith in himself is able to be faithful to others.只有对自己有信心的人才会对他人守信。 1、讲下redis答：非关系型数据库；本质上是一个key-value类型的内存数据库支持String、Hash、List、Set、zset(sorted set:有序集合)这五种数据类型，redis持久化；RDB和AOF RDB持久化是把当前进程数据生成快照保存到硬盘的过程，触发RDB持久化过程分为手动触发和自动触发 AOF(append only file)持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式。 redis架构模式单机版、主从复制、哨兵、集群 redis相关的还有缓存雪崩和缓存穿透 缓存穿透：是指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透 解决方法：一、布隆过滤二、缓存空对象. 将 null 变成一个值缓存雪崩：如果缓存集中在一段时间内失效，发生大量的缓存穿透，所有的查询都落在数据库上，造成了缓存雪崩。解决方法：一、数据预热，设置不同的过期时间，让缓存失效的时间点尽量均匀二、做二级缓存，或者双缓存策略三、加锁排队 2、 讲下mysql，除了增删改查，mysql讲一下答： 数据库优化首先要根据需求写出结构良好的SQL，然后根据SQL在表中建立有效的索引。但是如果索引太多，不但会影响写入的效率，对查询也有一定的影响根据数据库三范式来进行表结构的设计。设计表结构时，就需要考虑如何设计才能更有效的查询。mysql索引数据结构是B+树； 索引优化方式避免过度索引避免重复和冗余索引删除不需要使用的索引复合索需要引遵循最左原则合理使用短索引避免索引失效 sql语句优化在表中建立索引，优先考虑where、group by使用到的字段尽量避免使用select ，返回无用的字段会降低查询效率；优化方式：使用具体的字段代替，只返回使用到的字段。尽量避免使用in 和not in，会导致数据库引擎放弃索引进行全表扫描；优化方式：如果是连续数值，可以用between代替；如果是子查询，可以用exists代替；尽量避免在where条件中等号的左侧进行表达式、函数操作，会导致数据库引擎放弃索引进行全表扫描。尽量避免进行null值的判断，会导致数据库引擎放弃索引进行全表扫描，需求调节允许的话，可以给字段添加默认值0，对0值进行判断 3、讲下索引数据结构答：mysql索引的数据结构是树，常用的存储引擎innodb采用的是B+Tree 4、你登录了，但操作的时候有时候重定向，怎么确定是哪个用户登录的，登录的数据是从哪里取的？session中 5、Session 怎么实现信息共享？6、讲下cookie和session答：cookie： 在客户端保存数据，不安全，别人可以分析保存在本地的cookie进行cookie欺骗。 只能保存字符串，且是少量数据session： 在服务端保存数据，安全 可以保存对象数据，数据无限制（但，当访问过多，会比较占服务器的性能） 一般情况下，session生成的sessionid都是保存在cookie中 7、你的搜索模块，你搜索的时候，执行流程是怎样的？就是从前端到后端再到前端的实现流程？8、联合索引答：如果你经常要用到多个字段的多条件查询，可以考虑建立联合索引，一般是除第一个字段外的其它字段不经常用于条件筛选情况，比如说a,b 两个字段，如果你经常用a条件或者a+b条件去查询，而很少单独用b条件查询，那么可以建立a,b的联合索引。如果a和b都要分别经常独立的被用作查询条件，那还是建立多个单列索引 9、你们实例有多少个？该点属于部署问题 10、如果你写登录这模块的话，你的思路是怎样的？11、说下你知道的数据结构答：数组，栈，链表，队列，树，图，堆，散列表等 12、红黑树特点13、平时有看专业相关书籍吗？说几个书名。14、简历上的项目相关的问题，问写你的模块等等]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用hexo+github搭建免费个人博客详细教程]]></title>
    <url>%2Fpost%2Fcc73ba6b.html</url>
    <content type="text"><![CDATA[A sincere smile is the most beautiful expression.真诚的笑脸是人世间最美的表情。 前言体验更加排版请访问原文链接：http://blog.liuxianan.com/build-blog-website-by-hexo-github.html 使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快；免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；博客内容可以轻松打包、转移、发布到其它平台；等等； 1.1. 准备工作在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个；安装了node.js、npm，并了解相关基础知识；安装了git for windows（或者其它git客户端）本文所使用的环境： Windows8.1node.js@5.5.0git@1.9.2hexo@3.2.2 搭建github博客2.1. 创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功；仓库名字必须是：username.github.io，其中username是你的用户名；仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 2.2. 绑定域名当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 $ cd ~/. ssh #检查本机已存在的ssh密钥如果提示：No such file or directory 说明你是第一次使用git。 ssh-keygen -t rsa -C “邮件地址”然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key： 将刚复制的内容粘贴到key那里，title随便填，保存。 3.1. 测试是否成功$ ssh -T git@github.com # 注意邮箱地址不用改如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置： $ git config –global user.name “liuxianan”// 你的github用户名，非昵称$ git config –global user.email “xxx@qq.com“// 填写你的github注册邮箱具体这个配置是干嘛的我没仔细深究。 使用hexo写博客4.1. hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 4.2. 原理由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3. 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 4.4. 安装$ npm install -g hexo 4.5. 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。 $ cd /f/Workspaces/hexo/$ hexo inithexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图： $ hexo g # 生成$ hexo s # 启动服务执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑，打开时就是这个样子： 4.6. 修改主题既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： $ cd /f/Workspaces/hexo/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia下载后的主题都在这里： 修改_config.yml中的theme: landscape改为theme: yilia，然后重新执行hexo g来重新生成。 如果出现一些莫名其妙的问题，可以先执行hexo clean来清理一下public的内容，然后再来重新生成和发布。 4.7. 上传之前在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 4.8. 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master错误写法： deploy: type: github repository: https://github.com/liuxianan/liuxianan.github.io.git branch: master后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行hexo d的话一般会报如下错误： Deployer not found: github 或者 Deployer not found: git原因是还需要安装一个插件： npm install hexo-deployer-git –save其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会： 4.9. 保留CNAME、README.md等文件提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.10. 常用hexo命令常见命令 hexo new “postName” #新建文章hexo new page “pageName” #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本缩写： hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy组合命令： hexo s -g #生成并本地预览hexo d -g #生成并上传 4.11. _config.yml这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 4.12. 写博客定位到我们的hexo根目录，执行命令： hexo new ‘my-first-blog’hexo会帮我们在_posts下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格 description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面以下是正文那么hexo new page ‘postName’命令和hexo new ‘postName’有什么区别呢？ hexo new page “my-second-blog”生成如下： 最终部署时生成：hexo\public\my-second-blog\index.html，但是它不会作为文章出现在博文目录。 4.12.1. 写博客工具那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。 4.12.2. 如何让博文列表不显示全部内容默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上即可，例如： 最终效果可以访问我的git博客来查看效果： http://mygit.me 不过呢，其实这个博客我只是拿来玩一玩的，没打算真的把它当博客，因为我已经有一个自己的博客了，哈哈！正因如此，本文仅限入门学习，关于hexo搭建个人博客的更高级玩法大家可以另找教程。 参考http://www.cnblogs.com/zhcncn/p/4097881.html http://www.jianshu.com/p/05289a4bc8b2]]></content>
      <categories>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
